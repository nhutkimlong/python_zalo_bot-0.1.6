#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Example usage of Sunworld integration with BaDen Tourist AI Bot
"""

import asyncio
import logging
from dotenv import load_dotenv

# Setup
load_dotenv()
logging.basicConfig(level=logging.INFO, format="%(asctime)s %(levelname)s ‚Äî %(message)s")

async def example_bot_usage():
    """Example of how the bot handles price queries."""
    print("ü§ñ BaDen Tourist AI Bot - Sunworld Integration Example")
    print("=" * 60)
    
    from baden_tourist_ai import BaDenAIBot
    
    bot = BaDenAIBot()
    
    # Example queries that will trigger price updates
    example_queries = [
        ("Kh√°ch h√†ng A", "gi√° v√© c√°p treo l√™n ƒë·ªânh bao nhi√™u?"),
        ("Kh√°ch h√†ng B", "c√≥ combo n√†o ∆∞u ƒë√£i kh√¥ng?"),
        ("Kh√°ch h√†ng C", "v√© v√†o c·ªïng gi√° bao nhi√™u?"),
        ("Kh√°ch h√†ng D", "b·∫£ng gi√° m·ªõi nh·∫•t c·ªßa Sunworld"),
    ]
    
    try:
        for user_name, query in example_queries:
            print(f"\nüë§ {user_name}: {query}")
            print("-" * 40)
            
            # Bot will automatically:
            # 1. Check if price update is needed
            # 2. Fetch latest prices from Sunworld API if needed
            # 3. Update knowledge base
            # 4. Retrieve relevant information
            # 5. Generate friendly response
            
            contexts = await bot.retrieve(query, k=3)
            response = await bot.generate(user_name, query, contexts)
            
            print(f"ü§ñ Bot: {response[:200]}...")
            print()
    
    finally:
        # Cleanup
        if hasattr(bot, 'session') and bot.session:
            await bot.session.close()
        if hasattr(bot, 'price_updater') and bot.price_updater:
            await bot.price_updater.close()

async def example_direct_price_update():
    """Example of direct price update."""
    print("\nüîÑ Direct Price Update Example")
    print("=" * 40)
    
    from sunworld_integration import SunworldPriceUpdater
    import os
    
    supabase_url = os.getenv("SUPABASE_URL", "")
    supabase_key = os.getenv("SUPABASE_KEY", "")
    sunworld_key = os.getenv("SUNWORLD_SUBSCRIPTION_KEY", "")
    
    updater = SunworldPriceUpdater(supabase_url, supabase_key, sunworld_key)
    
    try:
        result = await updater.update_prices()
        
        if result["success"]:
            print("‚úÖ Price update successful!")
            print(f"üìä Total products: {result['data']['total_products']}")
            print(f"‚è±Ô∏è Response time: {result['data']['response_time_ms']}ms")
            print(f"üìù Markdown length: {result['data']['markdown_length']} chars")
            print("\nüìà Categories:")
            for category, count in result['data']['categories'].items():
                if count > 0:
                    print(f"  - {category}: {count} products")
        else:
            print(f"‚ùå Price update failed: {result.get('error', 'Unknown error')}")
    
    finally:
        await updater.close()

async def example_scheduler():
    """Example of running the price scheduler."""
    print("\n‚è∞ Price Scheduler Example")
    print("=" * 40)
    print("To run the scheduler continuously:")
    print("python price_scheduler.py")
    print("\nThe scheduler will:")
    print("- Update prices every 6 hours")
    print("- Log all activities")
    print("- Handle errors gracefully")
    print("- Reconnect automatically if needed")

async def main():
    """Run all examples."""
    await example_direct_price_update()
    await example_bot_usage()
    await example_scheduler()

if __name__ == "__main__":
    asyncio.run(main())